# Tell Travis CI we're using PHP
language: php

# Versions of PHP to test against
php:
  - 5.4
  - 7.0

# Specify versions of WordPress to test against
# WP_VERSION = WordPress version number (or "latest")
# WP_MULTISITE = whether to test multisite (use either "0" or "1")
env:
  - WP_VERSION=latest WP_MULTISITE=0 SNIFF=0
  - WP_VERSION=latest WP_MULTISITE=1 SNIFF=0

matrix:
  include:
    - name: "Lint"
      php: 7.0
      env: WP_VERSION=latest WP_MULTISITE=0 SNIFF=1

before_install:
  - if [[ "$SNIFF" == "1" ]]; then export PHPCS_DIR=/tmp/phpcs; fi
  - if [[ "$SNIFF" == "1" ]]; then export SNIFFS_DIR=/tmp/sniffs; fi
  # Install PHP_CodeSniffer.
  - if [[ "$SNIFF" == "1" ]]; then git clone -b master --depth 1 https://github.com/squizlabs/PHP_CodeSniffer.git $PHPCS_DIR; fi
  # Install WordPress Coding Standards.
  - if [[ "$SNIFF" == "1" ]]; then git clone -b master --depth 1 https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards.git $SNIFFS_DIR; fi
  # Set install path for WordPress Coding Standards.
  - if [[ "$SNIFF" == "1" ]]; then $PHPCS_DIR/bin/phpcs --config-set installed_paths $SNIFFS_DIR; fi
  # After CodeSniffer install refresh the path.
  - if [[ "$SNIFF" == "1" ]]; then phpenv rehash; fi

before_script:
  - bash bin/install-wp-tests.sh wordpress_test root '' localhost $WP_VERSION

script:
  - if [[ "$SNIFF" == "0" ]]; then WP_TESTS_DIR=/tmp/wordpress-tests-lib phpunit ; fi
  - if [[ "$SNIFF" == "1" ]]; then $PHPCS_DIR/bin/phpcs -p . --standard=WordPress; fi

# Reduce mail notifications by Travis CI to a minimum
notifications:
  email:
    on_success: change
    on_failure: always
